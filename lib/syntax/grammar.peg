{
  var indentStack = [], indent = "";

  var flatten = function (arr) {
    var o = {};
    for (var i = 0; i < arr.length; i++) {
      var obj = arr[i];
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          o[prop] = obj[prop];
        }
      }
    }
    return o;
  }

}

start
  = h:header EOL+ ll:lines {
      return {
        group: {
          context: h,
          lines: ll
        }
      }
    }

header
  = group_header

group_header
  = c:command _? cc:("," _? c:command { return c; })* {
      cc.unshift(c);
      return flatten(cc);
    }

command
  = pp:people_command { return pp; }
  / dd:date_command { return { date: dd }; }
  / tt:tag_command { return { tags: tt }; }
  / cc:currency_command { return { currency: cc }; }

people_command
  = "@people" pl:people_list { return { people: pl }; }
  / "@people" pm:people_modifiers { return { people_delta: pm }; }

date_command
  = "@date" _ d:date

tag_command
  = "@tag" tl:tag_list { return tl; }

tag_list
  = (_ t:tag { return t; })+

currency_command
  = "@currency" _ n:number

people_list
  = pp:(_ p:name {return p;})+ {
    return pp;
  }

people_modifiers
  = pp:(_ m:mod n:name { return { mod: m, name: n }; })+

mod = "+" / "-"

name
  = name:[a-zA-Z]+ {
    return name.join("").toLowerCase();
  }

line
  = SAMEDENT t:transaction_line { return t; }
  / t:transaction_line { return t; }
  / SAMEDENT h:header_line { return h; }
  / h:header_line { return h; }
  / comment EOL* { return null; }

transaction_line
  = t:transaction EOL* comment? EOL* { return t; }

header_line
  = gh:group_header EOL INDENT ll:line+ OUTDENT {
      return {group: { context: gh, lines:ll }};
    }

transaction
  = date:(d:date _ {return d;})?
    desc:(d:description ":" _? { return d; })?
    p:payers
    bs:(
      _
      arrow:("->" / "<-")
      bb:(_? b:beneficiaries { return b; })?
      opts:options {
        return [bb, opts, arrow];
      }
    )?
    _?
    c:comment? {
      var o = {
        date : date,
        payers : p,
        options: [],
        line: line()
      };
      if (desc) {
        o.desc = desc.desc;
        o.tags = desc.tags;
      }
      if (bs) {
        o.beneficiaries = bs[0];
        o.options = bs[1];
        o.reversed = bs[2] !== "->";
      }
      if (c) {
        o.comment = c;
      }
      return o;
    }

comment
  = "//" _? c:[^\n]* { return c.join("").trim(); }

date
  = year:([0-9][0-9][0-9][0-9]?)"-"month:([0-9][0-9])"-"day:([0-9][0-9]) {
      return new Date(year.join(""), month.join("") - 1, day.join(""));
  }

description
  = w:[^/:@]+ {
      var desc = w.join("");
      return {
        desc: desc,
        tags: desc.match(/#[^# ]+/g)
      };
  }

word
  = word:[a-zA-Z-_'0-9"]+ { return word.join(""); }

tag
  = t:("#" word) { return t.join(""); }

payers
  = p:payer others:(_ p_n:payer { return p_n; })* {
      return [p].concat(others);
    }

payer
  = n:name _ e:expr { return {name : n, amount: e}; }

beneficiaries
  = b:beneficiary others:(_ b_n:beneficiary { return b_n; })* {
        return [b].concat(others);
    }
  / "" { return []; }

beneficiary
  = n:name _ m:modifier {
        return {
               name : n,
               modifiers : m
        };
    } /
    n:name _ a:expr {
        return {
               name : n,
               fixedAmount : a,
        };
    } /
    n:name {
        return {
            name : n
        };
    }

modifier
  = o:offset _ m:multiplier { return { offset: o, multiplier: m }; }
  / m:multiplier _ o:offset { return { offset: o, multiplier: m }; }
  / o:offset { return { offset: o }; }
  / m:multiplier { return { multiplier: m }; }

offset
  = "+" a:expr { return a; }
  / "-" a:expr { return -a; }

multiplier
  = "*" a:expr { return a; }

options
  = opts:(_? o:option { return o; })* { return opts; }

option
  = "..." { return { name: "group" }; }
  / "$"+ { return { name: "splitProportionally" }; }

expr
  = res:sum { return res; }

sum
  = t:term others:(t_n:(("+"/"-") term) { return parseFloat(t_n.join("")); })* {
      var sum = t;
      var length = others.length;
      for (var i = 0; i < length; i++) {
          sum += others[i];
      }
      return sum;
    }



term
  = f:factor others:("*" f_n:factor { return f_n; })* {
        var prod = f;
        var length = others.length;
        if (length > 0) {
            for (var i = 0; i < length; i++) {
                prod *= others[i];
            }
        }
        return prod;
    }

factor
  = number /
          "(" e:expr ")" { return e; }

float
  = n:((integer)? "." integer) { return parseFloat(n.join("")); }

integer
  = n:[0-9]+ { return parseInt(n.join("")); }

number
  = float / integer

_ = whitespace+

whitespace
  = " " / "\t"

EOL
  = "\r\n" / "\n" / "\r"

NOT_EOL
  = EOL &{ return false }
  / . { return true }

SAMEDENT
  = i:whitespace* &{ return i.join("") === indent; }

INDENT
  = i:whitespace+ &{ return i.length > indent.length; }
    { indentStack.push(indent); indent = i.join(""); pos = offset; }

OUTDENT
  = { indent = indentStack.pop(); }
