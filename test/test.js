// Generated by CoffeeScript 1.7.1
(function() {
  var assert, brain, fs, lines, parser, peg, requirejs, should, wallet;

  assert = require('assert');

  should = require('should');

  peg = require('pegjs');

  fs = require('fs');

  requirejs = require('requirejs');

  requirejs.config({
    nodeRequire: require
  });

  brain = new (requirejs('lib/geekywalletlib.js'));

  parser = peg.buildParser(fs.readFileSync('grammar.peg', 'utf8'));

  wallet = fs.readFileSync('examples/plain.wallet', 'utf8');

  lines = null;

  describe('peg parser', function() {
    it('should parse a plain wallet file', function() {
      var result;
      result = parser.parse(wallet);
      (result !== null).should.be["true"];
      return lines = result.group.lines;
    });
    return describe('simple line', function() {
      it('should parse the date', function() {
        var line;
        line = lines[0];
        return line.date.should.eql(new Date(2014, 3, 12));
      });
      it('should parse the description', function() {
        var line;
        line = lines[0];
        return line.desc.should.eql('plane ticket');
      });
      it('should parse the beneficiaries', function() {
        var line;
        line = lines[0];
        line.beneficiaries.should.containEql({
          name: 'luca'
        });
        line.beneficiaries.should.containEql({
          name: 'gabriele'
        });
        return line.beneficiaries.should.containEql({
          name: 'daniele'
        });
      });
      it('should parse the payers', function() {
        var line;
        line = lines[0];
        return line.payers.should.containEql({
          name: 'luca',
          amount: 450
        });
      });
      it('should prase the tags', function() {
        var line;
        line = lines[0];
        return (line.tags === null).should.be["true"];
      });
      it('should parse the options', function() {
        var line;
        line = lines[0];
        return line.options.should.be.empty;
      });
      return it('should parse the direction', function() {
        var line;
        line = lines[0];
        return line.reversed.should.be["false"];
      });
    });
  });

  describe('brain', function() {
    return describe('simple line', function() {
      it('should inherit people from the context', function() {
        var computedLines, line, result;
        result = parser.parse(wallet);
        computedLines = brain.computeFromParsed(result);
        line = computedLines[0];
        line.context.people.should.containEql('luca');
        line.context.people.should.containEql('gabriele');
        return line.context.people.should.containEql('daniele');
      });
      it('should inherit beneficiaries from the context when missing', function() {
        var computedLines, line, result;
        result = parser.parse(wallet);
        computedLines = brain.computeFromParsed(result);
        line = computedLines[1];
        line.beneficiaries.should.have.length(3);
        line.beneficiaries.should.containDeep([
          {
            name: 'luca'
          }
        ]);
        line.beneficiaries.should.containDeep([
          {
            name: 'gabriele'
          }
        ]);
        return line.beneficiaries.should.containDeep([
          {
            name: 'daniele'
          }
        ]);
      });
      it('should not inherit beneficiaries from the context when ... is not present', function() {
        var computedLines, line, result;
        result = parser.parse(wallet);
        computedLines = brain.computeFromParsed(result);
        line = computedLines[2];
        line.beneficiaries.should.have.length(2);
        line.beneficiaries.should.containDeep([
          {
            name: 'luca'
          }
        ]);
        line.beneficiaries.should.containDeep([
          {
            name: 'gabriele'
          }
        ]);
        return line.beneficiaries.should.not.containDeep([
          {
            name: 'daniele'
          }
        ]);
      });
      return it('should inherit beneficiaries from the context when ... is present', function() {
        var computedLines, line, result;
        result = parser.parse(wallet);
        computedLines = brain.computeFromParsed(result);
        line = computedLines[3];
        line.beneficiaries.should.have.length(3);
        line.beneficiaries.should.containDeep([
          {
            name: 'luca'
          }
        ]);
        line.beneficiaries.should.containDeep([
          {
            name: 'gabriele'
          }
        ]);
        return line.beneficiaries.should.containDeep([
          {
            name: 'daniele'
          }
        ]);
      });
    });
  });

}).call(this);
